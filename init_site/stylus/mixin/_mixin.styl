/* mixins */

/* sprite */
sprite($img) {
    background-image: url("../../img/"$img[8]);
    background-repeat: no-repeat;
    background-position: $img[2] $img[3];
    width: $img[4];
    height: $img[5];
}

/* letter-spacing */
letter-spacing($ps, $size) {
    letter-spacing: ($ps * $size / 1000)px;
}

/* breakpoints
320 px, 480 px, 600 px, 768 px, 1024 px, 1280 px и более — PC.
@include breakpoint(768) { font-size: 36px; } demo
*/

breakpoint( $value, $operator = 'min-width', $query = 'screen') {
    $if = $query + ' and (' + $operator + ':' + ($value/16) + 'em)';

    @media $if {
        {block}
    }
}

/* clearfix */
clearfix() {
    &:after {content: "."; display: block; height: 0; clear: both; visibility: hidden;}
}

/* verticatfix */
verticatfix() {
    height 100%;
    font-size 0;

    &:after {
        display inline-block;
        vertical-align middle;
        height 100%;
        width 0;
        content "";
    }
}

/* core-justify */
core-justify() {
    font-size: 0;
    text-align: justify;
    text-justify: newspaper;

    &:after {
        display: inline-block;
        height: 0;
        overflow: hidden;
        visibility: hidden;
        width: 100%;
        content: '';
    }

    .lt-ie8 & {
        text-align-last: justify;
        zoom: 1;
    }
}

/* placeholder */
//placeholder {
//    &.placeholder { {block} }
//    &:-moz-placeholder { {block} }
//    &::-moz-placeholder { {block} }
//    &::-webkit-input-placeholder { {block} }
//}

/* triangle */
triangle($direction = up, $size = 5px, $color = #000000) {
    content: '';
    width: 0;
    height: 0;

    if ($direction == up) {
        border-right: $size solid transparent;
        border-left: $size solid transparent;
        border-bottom: $size solid $color;
        border-top: none;
    }

    if ($direction == down) {
        border-right: $size solid transparent;
        border-left: $size solid transparent;
        border-top: $size solid $color;
        border-bottom: none;
    }

    if ($direction == right) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        border-right: none;
    }

    if ($direction == left) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        border-left: none;
    }

    if ($direction == upleft) {
        border: $size solid transparent;
        border-top: $size solid $color;
        border-left: $size solid $color;
    }

    if ($direction == upright) {
        border: $size solid transparent;
        border-top: $size solid $color;
        border-right: $size solid $color;
    }

    if ($direction == bottom-right) {
        border: $size solid transparent;
        border-bottom: $size solid $color;
        border-right: $size solid $color;
    }

    if ($direction == bottom-left) {
        border: $size solid transparent;
        border-bottom: $size solid $color;
        border-left: $size solid $color;
    }
}

/* footer-item */
footer-item($height, $wrapper, $footer){
    html, body { height: 100%; }

    {$wrapper} {
        min-height: 100%;
        height: auto !important;
        height: 100%;
        margin-bottom: -($height);
        padding-bottom: $height;
        box-sizing: border-box;
    }

    * html {$wrapper} {
        height: 100%;
    }

    {$footer} {
        position: relative;
        height: $height;
    }
}

/**
 * Button Mixins
 * simple helper mixins designed to avoid code repetition in _buttons.scss
 *
 * Usage:
 *  @include btn-bg(color, [hover, active]);
 *  @include btn-text(color, [hover, active]);
 *  @include btn-border(color, [hover, active]);
 *
 *  Arguments in brackets are optional. If empty, the initial argument will be used.
 */

//@mixin btn-bg($color, $hover-color: $color, $active-color: $color) {
//    background-color: $color;
//
//    &:hover { background-color: $hover-color; }
//
//    &.active,
//    &:active { background-color: $active-color; }
//}
//
//@mixin btn-border($color, $hover-color: $color, $active-color: $color) {
//    border: 1px solid $color;
//
//    &:hover { border: 1px solid $hover-color; }
//
//    &.active,
//    &:active { border: 1px solid $active-color; }
//}
//
//@mixin btn-text($color, $hover-color: $color, $active-color: $color) {
//    &,
//    &:visited,
//    &:focus,
//    & > a,
//    & > a:visited,
//    & > a:focus { color: $color; }
//    // Disabling the line below temporarily as libsass doesn't currently support @at-root
//    //@at-root { a#{&}:focus { color: $color; } }
//
//    &:hover,
//    & > a:hover { color: $hover-color; }
//    // Disabling the line below temporarily as libsass doesn't currently support @at-root
//    //@at-root { a#{&}:hover { color: $hover-color; } }
//
//    &.active,
//    &:active,
//    & > a.active,
//    & > a:active { color: $active-color; }
//    // Disabling the line below temporarily as libsass doesn't currently support @at-root
//    //@at-root { a#{&}:active { color: $active-color; } }
//}
